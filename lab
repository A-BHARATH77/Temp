server.js
const express = require("express");
const mysql = require("mysql");
const bcrypt = require("bcrypt");
const session = require("express-session");
const bodyParser = require("body-parser");
const path = require("path");
const app = express();
const port = 3000;

app.use(express.static("public"));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
    secret: "secret_key",
    resave: false,
    saveUninitialized: true
}));

const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "1234",
    database: "sleep_tracker"
});

db.connect(err => {
    if (err) throw err;
    console.log("Connected to database");
});

app.get("/", (req, res) => {
    if (!req.session.userId) {
        return res.sendFile(path.join(__dirname, "public", "login.html"));
    }
    res.redirect("/logs");
});

app.get("/register", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "register.html"));
});

app.post("/login", (req, res) => {
    const { username, password } = req.body;
    db.query("SELECT * FROM users WHERE username = ?", [username], (err, results) => {
        if (err) throw err;
        if (results.length > 0) {
            bcrypt.compare(password, results[0].password, (err, match) => {
                if (match) {
                    req.session.userId = results[0].id;
                    res.redirect("/logs");
                } else {
                    res.send("Invalid credentials");
                }
            });
        } else {
            res.send("User not found");
        }
    });
});

app.post("/register", (req, res) => {
    const { username, password } = req.body;
    bcrypt.hash(password, 10, (err, hash) => {
        db.query("INSERT INTO users (username, password) VALUES (?, ?)", [username, hash], (err) => {
            if (err) throw err;
            res.redirect("/");
        });
    });
});

app.get("/logout", (req, res) => {
    req.session.destroy();
    res.redirect("/");
});

app.get("/logs", (req, res) => {
    if (!req.session.userId) return res.redirect("/");
    res.sendFile(path.join(__dirname, "public", "logs.html"));
});

app.get("/logs/display", (req, res) => {
    if (!req.session.userId) return res.redirect("/");
    res.sendFile(path.join(__dirname, "public", "logs_display.html"));
});

app.get("/logs/data", (req, res) => {
    if (!req.session.userId) return res.redirect("/");
    db.query("SELECT id, DATE_FORMAT(start_time, '%Y-%m-%d %H:%i') AS start_time, DATE_FORMAT(end_time, '%Y-%m-%d %H:%i') AS end_time, total_hours FROM sleep_logs WHERE user_id = ?", [req.session.userId], (err, results) => {
        if (err) throw err;
        res.json(results);
    });
});

app.post("/add-log", (req, res) => {
    const { start_time, end_time } = req.body;
    const total_hours = ((new Date(end_time) - new Date(start_time)) / (1000 * 60 * 60)).toFixed(2);
    db.query("INSERT INTO sleep_logs (user_id, start_time, end_time, total_hours) VALUES (?, ?, ?, ?)",
        [req.session.userId, start_time, end_time, total_hours], (err) => {
            if (err) throw err;
            res.redirect("/logs/display");
        });
});

app.post("/edit-log", (req, res) => {
    const { log_id, start_time, end_time } = req.body;
    const total_hours = ((new Date(end_time) - new Date(start_time)) / (1000 * 60 * 60)).toFixed(2);
    db.query("UPDATE sleep_logs SET start_time = ?, end_time = ?, total_hours = ? WHERE id = ?", 
        [start_time, end_time, total_hours, log_id], (err) => {
            if (err) throw err;
            res.redirect("/logs/display");
        });
});

app.post("/delete-log", (req, res) => {
    const { log_id } = req.body;
    db.query("DELETE FROM sleep_logs WHERE id = ?", [log_id], (err) => {
        if (err) throw err;
        res.redirect("/logs/display");
    });
});


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h2>Login</h2>
    <form action="/login" method="POST">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Login</button>
    </form>
    <p>New user? <a href="register.html">Create an account</a></p>
</body>
</html>

logs_details.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sleep Logs</title>
    <!--<link rel="stylesheet" href="styles.css">-->
    <script>
        async function fetchLogs() {
            const response = await fetch('/logs/data');
            const logs = await response.json();
            const logsContainer = document.getElementById('logs');

            logsContainer.innerHTML = logs.map(log => `
                <div>
                    <p>Start: ${log.start_time}</p>
                    <p>End: ${log.end_time}</p>
                    <p>Total: ${log.total_hours} hours</p>
                    <form action="/edit-log" method="POST">
                        <input type="hidden" name="log_id" value="${log.id}">
                        <input type="datetime-local" name="start_time" required>
                        <input type="datetime-local" name="end_time" required>
                        <button type="submit">Edit</button>
                    </form>
                    <form action="/delete-log" method="POST">
                        <input type="hidden" name="log_id" value="${log.id}">
                        <button type="submit">Delete</button>
                    </form>
                </div>
            `).join('');
        }
        window.onload = fetchLogs;
    </script>
</head>
<body>
    <h2>Your Sleep Logs</h2>
    <div id="logs"></div>
    <a href="/logs">Add New Entry</a>
    <a href="/logout">Logout</a>
</body>
</html>


app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});

logs.hmtl
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sleep Entry</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h2>Enter Sleep Details</h2>
    <form action="/add-log" method="POST">
        <label>Start Time:</label>
        <input type="datetime-local" name="start_time" required>
        <label>End Time:</label>
        <input type="datetime-local" name="end_time" required>
        <button type="submit">Submit</button>
    </form>
    <a href="/logs/display">View Logs</a>
</body>
</html>

register.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h2>Register</h2>
    <form action="/register" method="POST">
        <input type="text" name="username" placeholder="Username" required>
        <input type="password" name="password" placeholder="Password" required>
        <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="login.html">Login</a></p>
</body>
</html>

CREATE DATABASE sleep_tracker;
USE sleep_tracker;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE sleep_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    total_hours DECIMAL(5,2) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
